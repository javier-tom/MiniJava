/**
 * CUP specification of the language grammar for a simple demo language.
 * Change this into the language grammar of MiniJava for your implementation.
 *
 * CSE 401/M501/P501 19au, 20sp
 */

package Parser;

import AST.*;
import java.util.*;
import java_cup.runtime.*;

/* Terminals (lexical tokens returned by the scanner): */

/* reserved words */
terminal DISPLAY;

/* keywords */
terminal CLASS, PUBLIC, STATIC, VOID, MAIN, NEW, IF, ELSE, TRUE, FALSE, WHILE;
terminal SOUT, THIS, EXTENDS, LENGTH, STRING_TYPE, INT, BOOLEAN;
terminal RETURN;

/* operators */
terminal PLUS, BECOMES, MINUS, TIMES, NOT, AND, LESS_THAN, DOT;

/* delimiters */
terminal LPAREN, RPAREN, SEMICOLON, LSQUARE, RSQUARE, LCURLY, RCURLY, COMMA;

/* identifiers */
terminal String IDENTIFIER;
terminal String INTEGER_LITERAL;


/* Nonterminals (constructed by parser): */

nonterminal Program Goal;
nonterminal MainClass MainClass;
nonterminal ClassDecl ClassDeclaration;
nonterminal MethDecl MethodDeclaration;
nonterminal Type Type;
nonterminal Exp Expression;
nonterminal True True;
nonterminal False False;

/* Precedence declarations: */

precedence left PLUS;


/* Productions: */

Goal ::= MainClass:m;
MainClass ::= CLASS IDENTIFIER LCURLY PUBLIC STATIC VOID MAIN LPAREN STRING LSQUARE RSQUARE IDENTIFIER RPAREN LCURLY STATEMENT RCURLY RCURLY;
ClassDeclaration ::= CLASS IDENTIFIER (EXTENDS IDENTIFIER)? LCURLY (VarDeclaration)* (MethodDeclaration)* RCURLY;
MethodDeclaration ::= PUBLIC Type IDENTIFIER LPAREN (Type IDENTIFIER (COMMA Type IDENTIFIER)*)? RPAREN LCURLY (VarDeclaration)*
    (Statement)* RETURN Expression SEMICOLON RCURLY;
Type ::= INT LSQUARE RSQUARE | BOOLEAN | INT | IDENTIFIER;
Statement ::= LCURLY (Statement)* RCURLY |
    IF LPAREN Expression RPAREN Statement ELSE Statement |
    WHILE LPAREN Expression RPAREN Statement |
    SOUT LPAREN Expression RPAREN SEMICOLON |
    IDENTIFIER BECOMES Expression SEMICOLON |
    IDENTIFIER LSQUARE Expression RSQUARE SEMICOLON;
Expression ::= Expression (AND | LESS_THAN | PLUS | MINUS | TIMES) Expression |
    Expression LSQUARE Expression RSQUARE |
    Expression DOT LENGTH |
    Expression DOT IDENTIFIER LPAREN (Expression (COMMA Expression)*)? RPAREN |
    INTEGER_LITERAL | True | False | IDENTIFIER | THIS |
    NEW INT LSQUARE Expression RSQUARE |
    NEW IDENTIFIER LPAREN RPAREN |
    NOT Expression |
    LPAREN Expression RPAREN;

True ::= TRUE {: RESULT = new True(); :};
False ::= FALSE {: RESULT = new False(); :};

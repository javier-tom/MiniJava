/**
 * CUP specification of the language grammar for a simple demo language.
 * Change this into the language grammar of MiniJava for your implementation.
 *
 * CSE 401/M501/P501 19au, 20sp
 */

package Parser;

import AST.*;
import java.util.*;
import java_cup.runtime.*;

/* Terminals (lexical tokens returned by the scanner): */

/* keywords */
terminal String CLASS, PUBLIC, STATIC, VOID, MAIN, NEW, IF, ELSE, TRUE, FALSE, WHILE;
terminal String SOUT, THIS, EXTENDS, LENGTH, STRING_TYPE;
terminal String RETURN;

/* operators */
terminal PLUS, BECOMES, MINUS, TIMES, NOT, AND, LESS_THAN, DOT;

/* delimiters */
terminal LPAREN, RPAREN, SEMICOLON, LSQUARE, RSQUARE, LCURLY, RCURLY, COMMA;

/* identifiers */
terminal String IDENTIFIER;

/* types*/
terminal String INT;
terminal String BOOLEAN;
terminal String INTEGER_LITERAL;


/* Nonterminals (constructed by parser): */

nonterminal Program Program;
nonterminal MainClass MainClass;
nonterminal ClassDecl ClassDecl;
nonterminal ClassDeclList ClassDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal MethodDeclList MethodDeclList;
nonterminal Formal Formal;
nonterminal FormalList FormalList;
nonterminal Statement Statement;
nonterminal StatementList StatementList;
nonterminal VarDecl VarDecl;
nonterminal VarDeclList VarDeclList;
nonterminal Type Type;
nonterminal Exp Expression;
nonterminal ExpList ExpressionList;
nonterminal Identifier Identifier;

/* Precedence declarations: */

precedence left PLUS, MINUS;
precedence left TIMES;
precedence left LESS_THAN;
precedence left AND;
precedence left NOT;



/* Productions: */

Program ::= MainClass:mc ClassDeclList:cdl
    {: RESULT = new Program(mc, cdl, mcxleft); :} |
    MainClass:mc {: RESULT = new Program (mc, new ClassDeclList(new Location(0, 0)), mcxleft); :};

MainClass ::= CLASS Identifier:id1 LCURLY PUBLIC STATIC VOID MAIN LPAREN STRING_TYPE LSQUARE RSQUARE
    Identifier:id2 RPAREN LCURLY Statement:s1 RCURLY RCURLY
    {: RESULT = new MainClass(id1, id2, s1, id1xleft); :};

ClassDecl ::= CLASS Identifier:id1 EXTENDS Identifier:id2 LCURLY VarDeclList:var_list MethodDeclList:methdecl_list RCURLY
    {: RESULT = new ClassDeclExtends(id1, id2, var_list, methdecl_list, id1xleft); :}
    | CLASS Identifier:id1 LCURLY VarDeclList:var_list MethodDeclList:methdecl_list RCURLY
    {: RESULT = new ClassDeclSimple(id1, var_list, methdecl_list, id1xleft); :};

ClassDeclList ::= ClassDeclList:cd_list ClassDecl:c
    {: cd_list.add(c);
       RESULT = cd_list; :}
    | ClassDecl:c
        {: ClassDeclList cdl = new ClassDeclList(cxleft);
           cdl.add(c);
           RESULT = cdl; :};

MethodDecl ::= PUBLIC Type:t Identifier:id LPAREN FormalList:formal_list RPAREN LCURLY VarDeclList:var_list
    StatementList:s_list RETURN Expression:exp SEMICOLON RCURLY
    {: RESULT = new MethodDecl(t, id, formal_list, var_list, s_list, exp, txleft); :}
    | PUBLIC Type:t Identifier:id LPAREN RPAREN LCURLY VarDeclList:var_list
    StatementList:s_list RETURN Expression:exp SEMICOLON RCURLY
    {: RESULT = new MethodDecl(t, id, new FormalList(txleft), var_list, s_list, exp, txleft); :};

MethodDeclList ::= MethodDeclList:methdecl_list MethodDecl:method
    {: methdecl_list.add(method);
       RESULT = methdecl_list; :}
    | MethodDecl:method
        {: MethodDeclList mdl = new MethodDeclList(methodxleft);
           mdl.add(method);
           RESULT = mdl; :};

VarDecl ::= Type:t Identifier:id SEMICOLON
    {: RESULT = new VarDecl(t, id, txleft); :};
VarDeclList ::= VarDeclList:var_list VarDecl:var
    {: var_list.add(var);
       RESULT = var_list; :}
    | VarDecl:var
    {: VarDeclList vdl = new VarDeclList(varxleft);
       vdl.add(var);
       RESULT = vdl; :};

Formal ::= Type:t Identifier:id
    {: RESULT = new Formal(t, id, txleft); :};

FormalList ::= Formal:f
    {: FormalList fl = new FormalList(fxleft);
       fl.add(f);
       RESULT = fl; :}
    | FormalList:formal_list COMMA Formal:formal
    {: formal_list.add(formal);
       RESULT = formal_list; :};

Type ::= INT:i LSQUARE RSQUARE
            {: RESULT = new IntArrayType(ixleft); :}
        | BOOLEAN:b
            {: RESULT = new BooleanType(bxleft); :}
        | INT:i
            {: RESULT = new IntegerType(ixleft); :}
        | IDENTIFIER:id
            {: RESULT = new IdentifierType(id, idxleft); :};

Identifier ::= IDENTIFIER:i {: RESULT = new Identifier(i, ixleft); :};

StatementList ::= StatementList:sl Statement:s
        {: sl.add(s); RESULT = sl; :} |
        Statement:s {: StatementList sl = new StatementList(sxleft);
                       sl.add(s);
                       RESULT = sl; :};

Statement ::= LCURLY StatementList:sl RCURLY
        {: RESULT = new Block(sl, slxleft); :} |
    IF LPAREN Expression:e RPAREN Statement:s1 ELSE Statement:s2
        {: RESULT = new If(e, s1, s2, exleft); :} |
    WHILE LPAREN Expression:e RPAREN Statement:s
        {: RESULT = new While(e, s, exleft); :} |
    SOUT LPAREN Expression:e RPAREN SEMICOLON
        {: RESULT = new Print(e, exleft); :} |
    Identifier:i BECOMES Expression:e SEMICOLON
        {: RESULT = new Assign(i, e, ixleft); :} |
    Identifier:i LSQUARE Expression:e1 RSQUARE BECOMES Expression:e2 SEMICOLON
        {: RESULT = new ArrayAssign(i, e1, e2, ixleft); :};

ExpressionList ::= ExpressionList:el COMMA Expression:e
        {: el.add(e); RESULT = el; :} |
    Expression:e {: ExpList el = new ExpList(exleft);
                    el.add(e);
                    RESULT = el; :};

Expression ::=
    Expression:e1 AND Expression:e2 {: RESULT = new And(e1, e2, e1xleft); :} |
    Expression:e1 LESS_THAN Expression:e2 {: RESULT = new LessThan(e1, e2, e1xleft); :} |
    Expression:e1 PLUS Expression:e2 {: RESULT = new Plus(e1, e2, e1xleft); :} |
    Expression:e1 MINUS Expression:e2 {: RESULT = new Minus(e1, e2, e1xleft); :} |
    Expression:e1 TIMES Expression:e2 {: RESULT = new Times(e1, e2, e1xleft); :} |
    Expression:e1 LSQUARE Expression:e2 RSQUARE
        {: RESULT = new ArrayLookup(e1, e2, e1xleft); :} |
    Expression:e DOT LENGTH
        {: RESULT = new ArrayLength(e, exleft); :} |
    Expression:e DOT Identifier:i LPAREN ExpressionList:el RPAREN
        {: RESULT = new Call(e, i, el, exleft); :} |
    INTEGER_LITERAL:i {: RESULT = new IntegerLiteral(Integer.parseInt(i), ixleft); :} |
    TRUE:t {: RESULT = new True(txleft); :} |
    FALSE:f {: RESULT = new False(fxleft); :} |
    IDENTIFIER:i {: RESULT = new IdentifierExp(i, ixleft); :} |
    THIS:t {: RESULT = new This(txleft); :} |
    NEW INT LSQUARE Expression:e RSQUARE
        {: RESULT = new NewArray(e, exleft); :} |
    NEW Identifier:i LPAREN RPAREN {: RESULT = new NewObject(i, ixleft); :} |
    NOT Expression:e {: RESULT = new Not(e, exleft); :} |
    LPAREN Expression:e RPAREN {: RESULT = e; :};